- name: Create install temp directory
  file:
    path: '{{ parallels_install_cache }}'
    state: directory
    owner: root
    group: wheel
    mode: '0755'
  tags:
    - parallels

- name: Download Parallels app installer
  get_url:
    url: '{{ _parallels_app_url }}'
    dest: '{{ _parallels_app_file }}'
    owner: administrator
    group: staff
    mode: '0644'

- name: Download Parallels auto-deploy package
  get_url:
    url: "{{ parallels_autodeploy_url }}"
    dest: '{{ parallels_install_cache }}/pd-autodeploy.zip'
    owner: administrator
    group: staff
    mode: '0644'

- name: Get checksum of Parallels auto-deploy package
  stat:
    path: '{{ parallels_install_cache }}/pd-autodeploy.zip'
    get_checksum: yes
    checksum_algorithm: md5
  register: autodeploy

- name: Check for previous Parallels auto-deploy package extraction
  stat:
    path: '{{ parallels_install_cache }}/pd-autodeploy.md5'
  register: previous_autodeploy_extracted

- name: Get previous Parallels auto-deploy package checksum
  slurp:
    src: '{{ parallels_install_cache }}/pd-autodeploy.md5'
  register: previous_autodeploy
  when: previous_autodeploy_extracted.stat.exists

- name: Calculate current auto-deploy package checksum
  set_fact:
    current_autodeploy_md5: '{{ autodeploy.stat.checksum }}'
  when: "'checksum' in autodeploy.stat"

- name: Calculate previous Parallels auto-deploy package checksum
  set_fact:
    previous_autodeploy_md5: '{{ previous_autodeploy.content | b64decode }}'
  when: previous_autodeploy_extracted.stat.exists

- name: Create a pd-autodeploy directory
  file:
    path: '{{ parallels_install_cache }}/pd-autodeploy'
    state: directory
    owner: administrator
    group: staff
    mode: '0755'

- name:
  # Avoid extracting every run due to changes made in the following tasks,
  # which would then result in the following tasks reporting changed as well.
  when: current_autodeploy_md5 | default('1') != previous_autodeploy_md5 | default('')
  block:
    - name: Extract the Parallels auto-deploy package
      unarchive:
        src: '{{ parallels_install_cache }}/pd-autodeploy.zip'
        dest: '{{ parallels_install_cache }}/pd-autodeploy/'
        list_files: yes
        remote_src: yes

    - name: Record checksum of extracted Parallels auto-deploy package
      copy:
        content: '{{ autodeploy.stat.checksum }}'
        dest: '{{ parallels_install_cache }}/pd-autodeploy.md5'
        owner: administrator
        group: staff
        mode: '0644'

- name: Enumerate Parallels auto-deploy package files
  find:
    path: '{{ parallels_install_cache }}/pd-autodeploy/'
    pattern: '*.pkg'
    file_type: directory
    recurse: yes
  register: available_pkgs

- name: Find Parallels auto-deploy package
  set_fact:
    autodeploy_package: '{{ available_pkgs.files | map(attribute="path") | first }}'

- name: Define paths to Parallels auto-deploy package files
  set_fact:
    autodeploy_config: '{{ autodeploy_package }}/License Key and Configuration/deploy.cfg'
    autodeploy_dmg: '{{ autodeploy_package }}/Parallels Desktop DMG/{{ _parallels_app_filename }}'

- name: Set license key in Parallels auto-deploy package
  replace:
    path: '{{ autodeploy_config }}'
    regexp: '^#* *license_key=".*"$'
    replace: 'license_key="{{ parallels_license_key }}"'

- name: Disable auto-check for updates in Parallels auto-deploy package
  replace:
    path: '{{ autodeploy_config }}'
    regexp: '^#* *updates_auto_check=".*"$'
    replace: 'updates_auto_check="0"'

- name: Disable auto-download for updates in Parallels auto-deploy package
  replace:
    path: '{{ autodeploy_config }}'
    regexp: '^#* *updates_auto_download=".*"$'
    replace: 'updates_auto_download="off"'

- name: Copy the Parallels installer into the auto-deploy package
  copy:
    src: '{{ _parallels_app_file }}'
    dest: '{{ autodeploy_dmg }}'
    remote_src: yes
    owner: administrator
    group: staff
    mode: '0644'

- name: Figure out the currently running Parallels Desktop process ID
  # NOTE: `community.general.pids` requires `psutil` plus is big. It's
  # NOTE: not worth it to have it as a dependency just for this task.
  command: >-
    pgrep -x prl_client_app
  failed_when: parallels_desktop_instance.rc not in [0, 1]
  register: parallels_desktop_instance

- name: Set the Parallels Desktop PID value
  set_fact:
    parallels_desktop_pid: >-
      {%- if not parallels_desktop_instance.rc -%}
        {{- parallels_desktop_instance.stdout | int -}}
      {%- endif -%}

- name: Ensure the Parallels Desktop app is not running
  when: parallels_desktop_pid  # it was actually running before
  become: no
  block:
    # TODO: Instruct Parallels to stop or suspend the running VMs prior
    # TODO: to stopping it. Invoking `prlctl stop` should do the trick.
    # TODO: `--acpi` is probably a good idea for the first attempt and
    # TODO: after the grace period, it could be retried with `--kill`.

    - name: Kindly ask Parallels Desktop app to exit
      # NOTE: This needs to run as `administrator` and not `root` because
      # NOTE: when executed with `sudo`, the `osascript` executable errors
      # NOTE: out, being unable to work with the `Parallels Desktop`
      # NOTE: instance spawned under another user. At least, this is
      # NOTE: happening under old macOS X, like v10.15.7.
      #
      # FIXME: Handle failures in this command: if Parallels Desktop started
      # FIXME: showing the "Update available" window, it rejects attempts to
      # FIXME: quit the program with a return code `1`. And the following
      # FIXME: standard error output:
      # FIXME:
      # FIXME: 40:44: execution error: Parallels Desktop got an error:
      # FIXME: User canceled. (-128)
      # FIXME:
      command: >-
        osascript -e 'tell application "Parallels Desktop" to quit'

    - name: >-
        Give the currently running Parallels Desktop process 50s to
        die gracefully
      # NOTE: This emulates `Contents/Resources/postflight`'s waiting
      # NOTE: behavior except for the higher check frequency for better
      # NOTE: responsiveness.
      command: >-
        pgrep -x prl_client_app
      register: parallels_desktop_instance
      failed_when: parallels_desktop_instance.rc != 1
      delay: 0.5
      retries: 100
      until: parallels_desktop_instance is not failed

    - name: Figure out the currently running Parallels Desktop process ID
      command: >-
        pgrep -x prl_client_app
      register: new_parallels_desktop_instance
      failed_when: parallels_desktop_instance.rc != 1

    - name: Terminate Parallels using a `kill` signal `TERM`
      command: >-
        kill -TERM '{{ parallels_desktop_pid }}'
      when: not new_parallels_desktop_instance.rc  # it is still running

    - name: >-
        Give the currently running Parallels Desktop process another 50s to
        die gracefully
      command: >-
        pgrep -x prl_client_app
      register: parallels_desktop_instance
      failed_when: parallels_desktop_instance.rc != 1
      delay: 0.5
      retries: 100
      until: parallels_desktop_instance is not failed

    - name: Figure out the currently running Parallels Desktop process ID
      command: >-
        pgrep -x prl_client_app
      register: new_parallels_desktop_instance
      failed_when: parallels_desktop_instance.rc not in [0, 1]

    - name: Brutally kill Parallels with `SIGTERM` showing no mercy
      command: >-
        kill -KILL '{{ parallels_desktop_pid }}'
      when: not new_parallels_desktop_instance.rc  # it is still running

    - name: Figure out the currently running Parallels Desktop process ID
      command: >-
        pgrep -x prl_client_app
      register: new_parallels_desktop_instance
      failed_when: parallels_desktop_instance.rc not in [0, 1]

    - name: >-
        Fail if a new Parallels Desktop instance appeared in place of the
        killed one
      fail:
        msg: >-
          Something or somebody has restarted Parallels Desktop outside of
          this update process. This mustn't be happening and should be fixed
          before it is possible to resume.
      when:
        - new_parallels_desktop_instance.rc == 0
        - new_parallels_desktop_instance.stdout | int != parallels_desktop_pid

- name: Install Parallels app using the auto-deploy package
  command: installer -pkg "{{ autodeploy_package }}" -target /
  become: yes
  become_user: root
  register: parallels_install
  until: parallels_install is success
  retries: 10

- name: Fix permissions changed during Parallels app install
  file:
    path: /usr/local/share/man/man8
    owner: administrator
    state: directory
    recurse: yes
  become: yes
  become_user: root
  tags:
    - parallels

- name: Reboot
  reboot:
  when: parallels_install is changed
  tags:
    - parallels
