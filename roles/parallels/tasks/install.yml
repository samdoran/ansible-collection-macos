- name: Create install temp directory
  file:
    path: '{{ parallels_install_cache }}'
    state: directory
    owner: root
    group: wheel
    mode: '0755'
  tags:
    - parallels

- name: Download Parallels app installer
  get_url:
    url: '{{ _parallels_app_url }}'
    dest: '{{ _parallels_app_file }}'
    owner: administrator
    group: staff
    mode: '0644'

- name: Download Parallels auto-deploy package
  get_url:
    url: "{{ parallels_autodeploy_url }}"
    dest: '{{ parallels_install_cache }}/pd-autodeploy.zip'
    owner: administrator
    group: staff
    mode: '0644'

- name: Get checksum of Parallels auto-deploy package
  stat:
    path: '{{ parallels_install_cache }}/pd-autodeploy.zip'
    get_checksum: yes
    checksum_algorithm: md5
  register: autodeploy

- name: Check for previous Parallels auto-deploy package extraction
  stat:
    path: '{{ parallels_install_cache }}/pd-autodeploy.md5'
  register: previous_autodeploy_extracted

- name: Get previous Parallels auto-deploy package checksum
  slurp:
    src: '{{ parallels_install_cache }}/pd-autodeploy.md5'
  register: previous_autodeploy
  when: previous_autodeploy_extracted.stat.exists

- name: Calculate current auto-deploy package checksum
  set_fact:
    current_autodeploy_md5: '{{ autodeploy.stat.checksum }}'
  when: "'checksum' in autodeploy.stat"

- name: Calculate previous Parallels auto-deploy package checksum
  set_fact:
    previous_autodeploy_md5: '{{ previous_autodeploy.content | b64decode }}'
  when: previous_autodeploy_extracted.stat.exists

- name: Create a pd-autodeploy directory
  file:
    path: '{{ parallels_install_cache }}/pd-autodeploy'
    state: directory
    owner: administrator
    group: staff
    mode: '0755'

- name:
  # Avoid extracting every run due to changes made in the following tasks,
  # which would then result in the following tasks reporting changed as well.
  when: current_autodeploy_md5 | default('1') != previous_autodeploy_md5 | default('')
  block:
    - name: Extract the Parallels auto-deploy package
      unarchive:
        src: '{{ parallels_install_cache }}/pd-autodeploy.zip'
        dest: '{{ parallels_install_cache }}/pd-autodeploy/'
        list_files: yes
        remote_src: yes

    - name: Record checksum of extracted Parallels auto-deploy package
      copy:
        content: '{{ autodeploy.stat.checksum }}'
        dest: '{{ parallels_install_cache }}/pd-autodeploy.md5'
        owner: administrator
        group: staff
        mode: '0644'

- name: Get Parallels version from `pd-autodeploy.zip`
  shell:
    cmd: >-
      unzip -l '{{ parallels_install_cache }}/pd-autodeploy.zip'
      'Parallels Desktop Business Edition mass deployment package v*'
      | grep /$ | head -n1
      | sed
      's#^.*Parallels Desktop Business Edition mass deployment package
      v\(.*\)/$#\1#g'
    # NOTE: `unzip` is used to list the files, not to unpack the archive.
    # NOTE: The `unarchive` module above is called conditionally so we
    # NOTE: can't rely on the files it returns.
  register: parallels_desktop_autodeploy_installer_version

- name: Find Parallels auto-deploy package
  set_fact:
    autodeploy_package: >-
      {{
        parallels_install_cache
      }}/pd-autodeploy/Parallels Desktop Business Edition
      mass deployment package v{{
        parallels_desktop_autodeploy_installer_version.stdout.strip()
      }}/Parallels Desktop Autodeploy.pkg

- name: Define paths to Parallels auto-deploy package files
  set_fact:
    autodeploy_config: '{{ autodeploy_package }}/License Key and Configuration/deploy.cfg'
    autodeploy_dmg_dir: '{{ autodeploy_package }}/Parallels Desktop DMG'

- name: Set license key in Parallels auto-deploy package
  replace:
    path: '{{ autodeploy_config }}'
    regexp: '^#* *license_key=".*"$'
    replace: 'license_key="{{ parallels_license_key }}"'

- name: Disable auto-check for updates in Parallels auto-deploy package
  replace:
    path: '{{ autodeploy_config }}'
    regexp: '^#* *updates_auto_check=".*"$'
    replace: 'updates_auto_check="0"'

- name: Disable auto-download for updates in Parallels auto-deploy package
  replace:
    path: '{{ autodeploy_config }}'
    regexp: '^#* *updates_auto_download=".*"$'
    replace: 'updates_auto_download="off"'

- name: Enumerate pre-existing DMGs under the auto-deploy package
  find:
    file_type: file
    paths: >-
      {{ autodeploy_dmg_dir }}
    patterns: ParallelsDesktop-*.dmg
    recurse: no
  register: parallels_installer_dmgs

- name: Wipe old DMG symlinks from the auto-deploy package
  file:
    follow: no
    path: >-
      {{ found_file.path }}
    state: absent
  loop: >-
    {{ parallels_installer_dmgs.files }}
  loop_control:
    loop_var: found_file
  when:
    - parallels_installer_dmgs.matched > 0

- name: Symlink the Parallels installer DMG into the auto-deploy package
  file:
    state: link
    src: '{{ _parallels_app_file }}'
    dest: '{{ autodeploy_dmg_dir }}/{{ _parallels_app_filename }}'
    owner: administrator
    group: staff
    mode: '0644'

- name: Ensure the Parallels Desktop app is not running
  become: no
  parallels_desktop:
    state: >-
      {{ parallels_max_termination_severity }}

- name: Install Parallels app using the auto-deploy package
  command: installer -pkg "{{ autodeploy_package }}" -target /
  become: yes
  become_user: root
  register: parallels_install
  until: parallels_install is success
  retries: 10

- name: Fix permissions changed during Parallels app install
  file:
    path: /usr/local/share/man/man8
    owner: administrator
    state: directory
    recurse: yes
  become: yes
  become_user: root
  tags:
    - parallels

- name: Ensure the Parallels Desktop app is running
  become: no
  parallels_desktop:
    state: started
  when:
    - parallels_install is changed
    - not parallels_reboot_post_upgrade
  tags:
    - parallels

- name: Reboot
  reboot:
  when:
    - parallels_install is changed
    - parallels_reboot_post_upgrade
  tags:
    - parallels
