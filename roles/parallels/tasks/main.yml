- name: Get installed Parallels app info
  samdoran.macos.parallels_facts:
  tags:
    - parallels
    - always

- name: Install Parallels
  include_tasks:
    file: install.yml
    apply:
      tags:
        - parallels
  when: parallels_app_version != ansible_facts.parallels.Version.Full
  tags:
    - parallels

# Check the system kernel extension database for the Parallels Team ID.
# There so no good way to get this information easily from the system
# at this time.
#
# https://kb.parallels.com/124289
# https://kb.parallels.com/111693
# https://support.jamfschool.com/hc/en-us/articles/115004701513-Whitelist-Kernel-Extensions
#
# Example output:
#
# $ sudo sqlite3 /var/db/SystemPolicyConfiguration/KextPolicy 'SELECT * FROM kext_policy;'
# 4C6364ACXT|com.parallels.kext.netbridge|1|Parallels International GmbH|1
# 4C6364ACXT|com.parallels.kext.vnic|1|Parallels International GmbH|1
# 4C6364ACXT|com.parallels.kext.hypervisor|1|Parallels International GmbH|1
# 4C6364ACXT|com.parallels.kext.usbconnect|1|Parallels International GmbH|1
#
- name: Check if Parallels kernel extensions are approved
  command: sqlite3 /var/db/SystemPolicyConfiguration/KextPolicy 'SELECT COUNT(*) from kext_policy WHERE team_id = "4C6364ACXT";'
  register: kernel_extension_policy
  changed_when: no
  tags:
    - parallels
    - parallels_check

- name: Pause to give a chance to approve the kernel modules via GUI
  ansible.builtin.pause:
    prompt: |

      A manual kernel extension module approval has to be done post updating
      Parallels. Connect to the host using remote graphical session and
      confirm the respective prompts asking whether those modules are allowed
      to be loaded.

      When confirmed, go ahead and hit <Enter> to continue.

      [!] The following assertion task will error out if you fail to complete this
      one.

  tags:
    - parallels
    - parallels_check
  when:
    - kernel_extension_policy.stdout | int < 4  # This number is derived from the example output above

- name: Check if Parallels kernel extensions are approved
  command: sqlite3 /var/db/SystemPolicyConfiguration/KextPolicy 'SELECT COUNT(*) from kext_policy WHERE team_id = "4C6364ACXT";'
  register: kernel_extension_policy
  changed_when: no
  tags:
    - parallels
    - parallels_check
  when:
    - kernel_extension_policy.stdout | int < 4  # This number is derived from the example output above

- name: Check that Parallels kernel extensions are loaded
  assert:
    fail_msg: >
      Parallels kernel extension is not loaded. Log into the GUI, open
      System Preferencs > Security, and click Allow.
    that:
      - kernel_extension_policy.stdout | int >= 4  # This number is derived from the example output above
  tags:
    - parallels
    - parallels_check

- name: Update Parallels facts
  samdoran.macos.parallels_facts:
  tags:
    - parallels
    - always

- name: Assert the correct Parallels app version is installed and properly configured
  assert:
    that:
      - parallels_app_version == ansible_facts.parallels.Version.Full
      - ansible_facts.parallels.License.state == 'valid'
      # this no longer seems to work, the start_pd_as_service config above is ignored in Parallels 13
      # rebooting the server after completing the entire playbook run seems to enable the service automatically
      - ansible_facts.parallels['Started as service'] == 'on'
  ignore_errors: '{{ ansible_check_mode }}'
  tags:
    - parallels
    - parallels_check
